<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.8.4"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.8.4">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.2.1"/>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>container_name</name>
          <description>Nazwa kontenera</description>
          <defaultValue>pandaap</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.90">
    <script>pipeline {
    agent {
  label &apos;dockerslave&apos;
}
    tools {
        maven &apos;M3&apos;
}

    environment {
        IMAGE = readMavenPom().getArtifactId()
        VERSION = readMavenPom().getVersion()
    }


    stages {
        stage(&apos;Clear running application&apos;) {
            steps {
                sh &apos;docker rm -f ${container_name} || true&apos;
            }
        }
         stage(&apos;Get code&apos;) {
            steps {
                git branch: &apos;test_selenium&apos;, credentialsId: &apos;PandaGitHub&apos;, url: &apos;https://github.com/JarekGolab/panda_application.git&apos;
            }
        }
        stage(&apos;Build and JUnit tests&apos;) {
            steps {
                // Get some code from a GitHub repository
                sh &quot;mvn clean install&quot;

                // Run Maven on a Unix agent.
                sh &quot;mvn -Dmaven.test.failure.ignore=true clean package&quot;

                // To run Maven on a Windows agent, use
                // bat &quot;mvn -Dmaven.test.failure.ignore=true clean package&quot;
            }
        }
         stage(&apos;Build docker image&apos;) {
            steps {
                sh &quot;mvn package -Pdocker&quot;
            }
        }
         
        stage(&apos;Selenium tests&apos;) {
            steps {
               
                sh &quot;mvn test -Pselenium&quot;

               
            }
        }
        stage(&apos;Run docker app&apos;) {
            steps {
                sh &quot;docker run -d -p 0.0.0.0:8080:8080 --name ${container_name} ${IMAGE}:${VERSION}&quot;
            }
        }
        stage(&apos;Deploy to Artifactory&apos;) {
            steps {
               
             configFileProvider([configFile(fileId: &apos;9d1ed313-ea70-4fa9-9934-7108c53eca75&apos;, variable: &apos;mvnSettings&apos;)]) {
                 sh &quot;mvn -s $mvnSettings deploy&quot;
                }

               
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>